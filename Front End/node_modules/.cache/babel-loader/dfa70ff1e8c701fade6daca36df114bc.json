{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ash\\\\Desktop\\\\React\\\\my-app\\\\src\\\\locations\\\\pages\\\\NewLocation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useReducer } from \"react\";\nimport \"./NewLocation.css\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        input: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst NewLocation = () => {\n  _s();\n\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      }\n    },\n    isValid: false\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"place-form\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      id: \"title\",\n      element: \"input\",\n      type: \"text\",\n      label: \"Title\",\n      validators: [VALIDATOR_REQUIRE()],\n      errorText: \"Enter a valid title!\",\n      onInput: inputHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      id: \"description\",\n      element: \"textarea\",\n      type: \"text\",\n      label: \"Title\",\n      validators: [VALIDATOR_MINLENGTH(5)],\n      errorText: \"Enter a valid description! at least 5 characters\",\n      onInput: inputHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      disabled: !formState.isValid,\n      children: \"Add Place\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NewLocation, \"KQAyAGV7MQEWILBvy/7cM+NrM/o=\");\n\n_c = NewLocation;\nexport default NewLocation;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewLocation\");","map":{"version":3,"names":["React","useCallback","useReducer","Input","Button","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","input","value","NewLocation","formState","dispatch","title","description","inputHandler","id"],"sources":["C:/Users/Ash/Desktop/React/my-app/src/locations/pages/NewLocation.js"],"sourcesContent":["import React, {useCallback, useReducer} from \"react\";\r\n\r\nimport \"./NewLocation.css\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type){\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for(const inputId in state.inputs){\r\n                if(inputId === action.inputId){\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                input: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: {value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid:formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}; \r\n\r\nconst NewLocation = () => {\r\n\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: {\r\n            title: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            description: {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        isValid: false\r\n    });\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id})\r\n    }, []);\r\n\r\n    return (\r\n        <form className=\"place-form\">\r\n            <Input \r\n                id=\"title\"\r\n                element=\"input\" \r\n                type=\"text\" \r\n                label=\"Title\" \r\n                validators={[VALIDATOR_REQUIRE()]} \r\n                errorText=\"Enter a valid title!\" \r\n                onInput= {inputHandler}\r\n            />\r\n            <Input \r\n                id=\"description\"\r\n                element=\"textarea\" \r\n                type=\"text\" \r\n                label=\"Title\" \r\n                validators={[VALIDATOR_MINLENGTH(5)]} \r\n                errorText=\"Enter a valid description! at least 5 characters\" \r\n                onInput= {inputHandler}\r\n            />\r\n            <Button type=\"submit\" disabled={!formState.isValid}>Add Place</Button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NewLocation;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,QAA6C,OAA7C;AAEA,OAAO,mBAAP;AACA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,8BAAvD;;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACnC,QAAQA,MAAM,CAACC,IAAf;IACI,KAAK,cAAL;MACI,IAAIC,WAAW,GAAG,IAAlB;;MACA,KAAI,MAAMC,OAAV,IAAqBJ,KAAK,CAACK,MAA3B,EAAkC;QAC9B,IAAGD,OAAO,KAAKH,MAAM,CAACG,OAAtB,EAA8B;UAC1BD,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;QACH,CAFD,MAEO;UACHH,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;QACH;MACJ;;MACD,OAAO,EACH,GAAGN,KADA;QAEHO,KAAK,EAAE,EACH,GAAGP,KAAK,CAACK,MADN;UAEH,CAACJ,MAAM,CAACG,OAAR,GAAkB;YAACI,KAAK,EAAEP,MAAM,CAACO,KAAf;YAAsBF,OAAO,EAAEL,MAAM,CAACK;UAAtC;QAFf,CAFJ;QAMHA,OAAO,EAACH;MANL,CAAP;;IAQJ;MACI,OAAOH,KAAP;EAnBR;AAqBH,CAtBD;;AAwBA,MAAMS,WAAW,GAAG,MAAM;EAAA;;EAEtB,MAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBjB,UAAU,CAACK,WAAD,EAAc;IAClDM,MAAM,EAAE;MACJO,KAAK,EAAE;QACHJ,KAAK,EAAE,EADJ;QAEHF,OAAO,EAAE;MAFN,CADH;MAKJO,WAAW,EAAE;QACTL,KAAK,EAAE,EADE;QAETF,OAAO,EAAE;MAFA;IALT,CAD0C;IAWlDA,OAAO,EAAE;EAXyC,CAAd,CAAxC;EAaA,MAAMQ,YAAY,GAAGrB,WAAW,CAAC,CAACsB,EAAD,EAAKP,KAAL,EAAYF,OAAZ,KAAwB;IACrDK,QAAQ,CAAC;MAACT,IAAI,EAAE,cAAP;MAAuBM,KAAK,EAAEA,KAA9B;MAAqCF,OAAO,EAAEA,OAA9C;MAAuDF,OAAO,EAAEW;IAAhE,CAAD,CAAR;EACH,CAF+B,EAE7B,EAF6B,CAAhC;EAIA,oBACI;IAAM,SAAS,EAAC,YAAhB;IAAA,wBACI,QAAC,KAAD;MACI,EAAE,EAAC,OADP;MAEI,OAAO,EAAC,OAFZ;MAGI,IAAI,EAAC,MAHT;MAII,KAAK,EAAC,OAJV;MAKI,UAAU,EAAE,CAACjB,iBAAiB,EAAlB,CALhB;MAMI,SAAS,EAAC,sBANd;MAOI,OAAO,EAAGgB;IAPd;MAAA;MAAA;MAAA;IAAA,QADJ,eAUI,QAAC,KAAD;MACI,EAAE,EAAC,aADP;MAEI,OAAO,EAAC,UAFZ;MAGI,IAAI,EAAC,MAHT;MAII,KAAK,EAAC,OAJV;MAKI,UAAU,EAAE,CAACjB,mBAAmB,CAAC,CAAD,CAApB,CALhB;MAMI,SAAS,EAAC,kDANd;MAOI,OAAO,EAAGiB;IAPd;MAAA;MAAA;MAAA;IAAA,QAVJ,eAmBI,QAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAsB,QAAQ,EAAE,CAACJ,SAAS,CAACJ,OAA3C;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAnBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAuBH,CA1CD;;GAAMG,W;;KAAAA,W;AA4CN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}